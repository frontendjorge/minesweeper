{"version":3,"sources":["components/game.js","App.js","serviceWorker.js","index.js"],"names":["i","tableBombIt","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","drawGameZone","bind","assertThisInitialized","addBtnRestart","array","bombIt","document","getElementById","length","cell","createElement","enter","className","innerText","onclick","showNumber","changeColor","boom","appendChild","classList","add","containerBombIt","btnRestart","addEventListener","reStart","removeChild","innerHTML","window","location","reload","react_default","a","id","Component","App","game","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uLAGIA,0GADAC,EAAc,CAAC,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAkG/EC,cA5Ff,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFLA,mFAOfG,KAAKI,aAAaV,GAClBM,KAAKO,qDAIIC,GACT,IAAIC,EAASC,SAASC,eAAe,WACrC,IAAKlB,EAAI,EAAGA,EAAIe,EAAMI,OAAQnB,IAAK,CAC/B,IAAIoB,EAAOH,SAASI,cAAc,OAC9BC,EAAQL,SAASI,cAAc,MAGnC,GAAiB,MAAbN,EAAMf,IAA2B,MAAbe,EAAMf,IAA2B,MAAbe,EAAMf,GAC9CoB,EAAKG,UAAY,SACjBH,EAAKI,UAAYT,EAAMf,GACvBoB,EAAKK,QAAUlB,KAAKmB,gBACjB,GAAiB,MAAbX,EAAMf,GACboB,EAAKG,UAAY,aACjBH,EAAKK,QAAUlB,KAAKoB,iBACjB,GAAiB,MAAbZ,EAAMf,GACboB,EAAKG,UAAY,OACjBH,EAAKK,QAAUlB,KAAKqB,UACjB,GAAiB,OAAbb,EAAMf,GAAa,CAC1BgB,EAAOa,YAAYP,GACnB,SAGJN,EAAOa,YAAYT,yCAQvBb,KAAKgB,UAAY,0DAIjBhB,KAAKuB,UAAUC,IAAI,0DAKf,IAAIC,EAAkBf,SAASC,eAAe,eAC1Ce,EAAahB,SAASI,cAAc,UACxCY,EAAWC,iBAAiB,QAAS3B,KAAK4B,SAC1CF,EAAWT,UAAY,iBACvBQ,EAAgBH,YAAYI,GAC5BA,EAAWH,UAAUC,IAAI,MAAO,cAAe,8CAI/C,IAAIC,EAAkBf,SAASC,eAAe,qBAC1CF,EAASC,SAASC,eAAe,WACrCc,EAAgBI,YAAYpB,GAC5BgB,EAAgBK,UAAY,0JAOhCC,OAAOC,SAASC,0CAMZ,OACIC,EAAAC,EAAArB,cAAA,OAAKE,UAAU,IACXkB,EAAAC,EAAArB,cAAA,OAAKsB,GAAG,cAAcpB,UAAU,oCAC5BkB,EAAAC,EAAArB,cAAA,sCACAoB,EAAAC,EAAArB,cAAA,WAASsB,GAAG,qBACZF,EAAAC,EAAArB,cAAA,WAASsB,GAAG,cAGhBF,EAAAC,EAAArB,cAAA,OAAKE,UAAU,aACXkB,EAAAC,EAAArB,cAAA,kLAvFAuB,oBCSLC,MAVf,WACE,OACEJ,EAAAC,EAAArB,cAAA,OAAKsB,GAAG,MAAMpB,UAAU,OACtBkB,EAAAC,EAAArB,cAAA,OAAKsB,GAAG,KAAKpB,UAAU,uCACnBkB,EAAAC,EAAArB,cAACyB,EAAD,SCGUC,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAArB,cAAC+B,EAAD,MAASnC,SAASC,eAAe,SD4H3C,kBAAmBmC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a673949f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nvar tableBombIt = [' ','*','1',' ','/n',' ',' ','*','2','/n','1','*',' ',' ','/n',' ','3','*',' '];\nvar i;\n\n\nclass Board extends Component {\n\nconstructor(props) {\n    super(props);\n    this.drawGameZone = this.drawGameZone.bind(this);       \n}\n\n\ncomponentDidMount() {\n    this.drawGameZone(tableBombIt);\n    this.addBtnRestart();\n}\n\n\ndrawGameZone(array) {\n    var bombIt = document.getElementById('bomb-it');\n    for (i = 0; i < array.length; i++) {\n        var cell = document.createElement('div');\n        var enter = document.createElement('br');\n        \n\n        if (array[i] === '1' || array[i] === '2' || array[i] === '3') {\n            cell.className = 'number';\n            cell.innerText = array[i];\n            cell.onclick = this.showNumber;\n        } else if (array[i] === ' ') {\n            cell.className = 'emptySpace';\n            cell.onclick = this.changeColor;\n        } else if (array[i] === '*') {\n            cell.className = 'bomb';\n            cell.onclick = this.boom;\n        } else if (array[i] === '/n') {\n            bombIt.appendChild(enter);\n            continue;\n        }\n\n        bombIt.appendChild(cell);\n        \n    }\n    \n}\n\n\nshowNumber() {\n    this.className = 'number numberShow';\n}\n\nchangeColor() {\n    this.classList.add(\"emptyColorFlag\");\n}\n\n\naddBtnRestart() {\n        var containerBombIt = document.getElementById('globalBoard');\n        var btnRestart = document.createElement('button');\n        btnRestart.addEventListener('click', this.reStart);\n        btnRestart.innerText = '¡Reiniciar!';\n        containerBombIt.appendChild(btnRestart);\n        btnRestart.classList.add(\"btn\", \"btn-primary\", \"btn-restart\")\n    }   \n    \n boom () {\n        var containerBombIt = document.getElementById('container-bomb-it');\n        var bombIt = document.getElementById('bomb-it');\n        containerBombIt.removeChild(bombIt);\n        containerBombIt.innerHTML = \"<img class='img-responsive center-block' src='https://media.giphy.com/media/xT0xeHDVBcAulhRJRK/giphy.gif' alt='BOOM'>\";\n       \n    }\n\n\n\nreStart() {\n    window.location.reload(); \n}\n\n\n\n    render() {\n        return (\n            <div className=\"\">\n                <div id=\"globalBoard\" className=\"board-container-parent container\">\n                    <h1>Buscaminas / Minesweeper</h1>\n                    <section id=\"container-bomb-it\">\n                    <section id=\"bomb-it\"></section>\n                    </section>\n                </div>\n                <div className=\"copyright\">\n                    <p>Desarrollado por Jorge Suárez. No tiene ningún fin comercial. Puede compartirlo, mejorarlo, hacerle fork teniendo en cuenta que siempre sea educativo.</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Board;","import React from 'react';\nimport \"babel-polyfill\";\nimport BoardTop from './components/game'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"App\">\n      <div id=\"bo\" className=\"level-one container-fluid nopadding\">\n          <BoardTop />\n      </div>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      //const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}